Dropdown1

import { Menu, Transition } from "@headlessui/react";
import {
  CheckIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from "@heroicons/react/20/solid";
import { Fragment } from "react";

function classNames(...classes: string[]) {
  return classes.filter(Boolean).join(" ");
}

export type DisciplinasType = "Português" | "Matemática" | "Geografia" | "História" | "Ciências" | "Artes" | "Informática" | "Educação Física" | "Ensino Religioso";

interface DropDownProps {
  disciplina: DisciplinasType;
  setdisciplina: (disciplina: DisciplinasType) => void;
}

let disciplinas: DisciplinasType[] = ["Português", "Matemática", "Geografia" , "História" , "Ciências" , "Artes" , "Informática" , "Educação Física" , "Ensino Religioso"];

export default function DropDown({ disciplina, setdisciplina }: DropDownProps) {
  return (
    <Menu as="div" className="relative block text-left w-full">
      <div>
        <Menu.Button className="inline-flex w-full justify-between items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-black">
          {disciplina}
          <ChevronUpIcon
            className="-mr-1 ml-2 h-5 w-5 ui-open:hidden"
            aria-hidden="true"
          />
          <ChevronDownIcon
            className="-mr-1 ml-2 h-5 w-5 hidden ui-open:block"
            aria-hidden="true"
          />
        </Menu.Button>
      </div>

      <Transition
        as={Fragment}
        enter="transition ease-out duration-100"
        enterFrom="transform opacity-0 scale-95"
        enterTo="transform opacity-100 scale-100"
        leave="transition ease-in duration-75"
        leaveFrom="transform opacity-100 scale-100"
        leaveTo="transform opacity-0 scale-95"
      >
        <Menu.Items
          className="overflow-y-scroll max-h-[150px] absolute left-0 z-10 mt-2 w-full origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
          key={disciplina}
        >
          <div className="">
            {disciplinas.map((disciplinaItem) => (
              <Menu.Item key={disciplinaItem}>
                {({ active }) => (
                  <button
                    onClick={() => setdisciplina(disciplinaItem)}
                    className={classNames(
                      active ? "bg-gray-100 text-gray-900" : "text-gray-700",
                      disciplina === disciplinaItem ? "bg-gray-200" : "",
                      "px-4 py-2 text-sm w-full text-left flex items-center space-x-2 justify-between"
                    )}
                  >
                    <span>{disciplinaItem}</span>
                    {disciplina === disciplinaItem ? (
                      <CheckIcon className="w-4 h-4 text-bold" />
                    ) : null}
                  </button>
                )}
              </Menu.Item>
            ))}
          </div>
        </Menu.Items>
      </Transition>
    </Menu>
  );
}

--

Dropdown2

import { Menu, Transition } from "@headlessui/react";
import {
  CheckIcon,
  ChevronDownIcon,
  ChevronUpIcon,
  MagnifyingGlassIcon,
  XMarkIcon,
} from "@heroicons/react/20/solid";
import { Fragment, useEffect, useState } from "react";

function classNames(...classes: string[]) {
  return classes.filter(Boolean).join(" ");
}

interface DropDown2Props {
  habilidade: string;
  sethabilidade: (habilidade: string) => void;
}

export default function DropDown2({
  habilidade,
  sethabilidade,
}: DropDown2Props) {
  const [habilidades, setHabilidades] = useState<string[]>([]);
  const [searchTerm, setSearchTerm] = useState<string>("");
  const [filteredHabilidades, setFilteredHabilidades] = useState<string[]>([]);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false); // Adicionado estado para controlar se o dropdown está aberto

  useEffect(() => {
    fetch("habilidades.txt")
      .then((response) => response.text())
      .then((data) => {
        const lines = data.split("\n").filter((line) => line.trim() !== "");

        setHabilidades(lines);
      });
  }, []);

  useEffect(() => {
    const filtered = habilidades.filter((habilidadeItem) =>
      habilidadeItem.toLowerCase().includes(searchTerm.toLowerCase())
    );
    setFilteredHabilidades(filtered);
  }, [habilidades, searchTerm]);

  const openDropdown = () => {
    setIsDropdownOpen(true);
  };

  const closeDropdown = () => {
    setIsDropdownOpen(false);
  };

  return (
    <Menu as="div" className="relative block text-left w-full">
      <div>
        <Menu.Button
          className="inline-flex w-full justify-between items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-black"
          onClick={() => setIsDropdownOpen(!isDropdownOpen)} // Alterne o estado do dropdown ao clicar no botão
        >
          {habilidade}
          <ChevronUpIcon
            className="-mr-1 ml-2 h-5 w-5 ui-open:hidden"
            aria-hidden="true"
          />
          <ChevronDownIcon
            className="-mr-1 ml-2 h-5 w-5 hidden ui-open:block"
            aria-hidden="true"
          />
        </Menu.Button>
      </div>
  
      <Transition
        as={Fragment}
        show={isDropdownOpen}
        enter="transition ease-out duration-100"
        enterFrom="transform opacity-0 scale-95"
        enterTo="transform opacity-100 scale-100"
        leave="transition ease-in duration-75"
        leaveFrom="transform opacity-100 scale-100"
        leaveTo="transform opacity-0 scale-95"
        afterLeave={() => setIsDropdownOpen(false)} // Fecha o dropdown após sair da transição
      >
        <Menu.Items
          className="overflow-y-scroll max-h-[150px] absolute left-0 z-10 mt-2 w-full origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
          key={habilidade}
        >
          <div className="">
            {/* Campo de pesquisa dentro do dropdown */}
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <MagnifyingGlassIcon className="text-gray-400" />
              </div>
              <input
                type="text"
                className="block w-full rounded-md bg-white border border-gray-300 px-4 py-2 pl-10 text-gray-900 focus:outline-none focus:ring-2 focus:ring-black"
                placeholder="Pesquisar habilidade"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
              {searchTerm !== "" && (
                <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
                  <button
                    onClick={() => setSearchTerm("")}
                    className="text-gray-400 hover:text-gray-600 focus:outline-none"
                  >
                    <XMarkIcon className="h-5 w-5" />
                  </button>
                </div>
              )}
            </div>

            {filteredHabilidades.map((habilidadeItem) => (
              <Menu.Item key={habilidadeItem}>
                {({ active }) => (
                  <button
                    onClick={() => {
                      sethabilidade(habilidadeItem);
                      closeDropdown(); // Fecha o dropdown ao selecionar uma habilidade
                    }}
                    className={classNames(
                      active ? "bg-gray-100 text-gray-900" : "text-gray-700",
                      habilidade === habilidadeItem ? "bg-gray-200" : "",
                      "px-4 py-2 text-sm w-full text-left flex items-center space-x-2 justify-between"
                    )}
                  >
                    <span>{habilidadeItem}</span>
                    {habilidade === habilidadeItem ? (
                      <CheckIcon className="w-4 h-4 text-bold" />
                    ) : null}
                  </button>
                )}
              </Menu.Item>
            ))}
          </div>
        </Menu.Items>
      </Transition>
    </Menu>
  );
}


--

page




'use client';

import Image from 'next/image';
import { useRef, useState } from 'react';
import { Toaster, toast } from 'react-hot-toast';
import DropDown, { DisciplinasType } from '../components/DropDown';
import DropDown2, { HabilidadesType } from '../components/DropDown2';
import DropDown3, { AtividadesType } from '../components/DropDown3';
import DropDown4, { ObjetivosType } from '../components/DropDown4';
import DropDown5, { IdadesType } from '../components/DropDown5';
import DropDown6, { DificuldadesType } from '../components/DropDown6';
import Footer from '../components/Footer';
import Github from '../components/GitHub';
import Header from '../components/Header';
import { useChat } from 'ai/react';

export default function Page() {
  const [bio, setBio] = useState('');
  const [disciplina, setdisciplina] = useState('Selecione a disciplina...');
  const [habilidade, sethabilidade] = useState('Selecione a habilidade...');
  const [atividade, setatividade] = useState('Selecione a atividade...');
  const [objetivo, setobjetivo] = useState('Selecione um objetivo...');
  const [idade, setidade] = useState('Selecione uma faixa etária...');
  const [dificuldade, setdificuldade] = useState('Selecione a dificuldade...');
  const bioRef = useRef<null | HTMLDivElement>(null);

  const scrollToBios = () => {
    if (bioRef.current !== null) {
      bioRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const { input, handleInputChange, handleSubmit, isLoading, messages } =
    useChat({
      body: {
        disciplina,
        habilidade,
        atividade,
        objetivo,
        idade,
        dificuldade,
        bio,
      },
      onResponse() {
        scrollToBios();
      },
    }); ''

  const onSubmit = (e: any) => {
    setBio(input);
    handleSubmit(e);
  };

  const lastMessage = messages[messages.length - 1];
  const generatedBios = lastMessage?.role === "assistant" ? lastMessage.content : null;

  return (
    <div className="flex  mx-auto flex-col items-center justify-center py-2 min-h-screen bg-cover bg-contain"
      style={{ background: "no-repeat center/cover url(/bkgrnd.png)" }}>

      <Header />
      <main
        className="backdrop-blur-sm bg-white/70 flex flex-1 flex-col items-center justify-center text-center px-auto sm:mt-10 bg-cover bg-contain">

        <h1 className="sm:text-5xl text-4xl max-w-[900px] font-bold mt-10 text-slate-900">
          Qual atividade você gostaria de elaborar hoje?
        </h1>
        <p className="text-slate-500 mt-5 font-semibold">Usando IA para elaborar atividades escolares em um passe de mágica.</p>
        <form className="max-w-xl w-full" onSubmit={onSubmit}>
          <div className="flex mt-10 items-center space-x-3">
            <Image
              src="/1-black.png"
              width={30}
              height={30}
              alt="1 icon"
              className="mb-5 sm:mb-0"
            />
            <p className="text-left font-medium">
              Descreva brevemente o tema de sua atividade{' '}
              <span className="text-slate-500">
                (ou digite algumas palavras chave e eu cuidarei do resto)
              </span>
              .
            </p>
          </div>
          <textarea
            value={input}
            onChange={handleInputChange}
            rows={4}
            className="w-full rounded-md border-gray-300 shadow-sm focus:border-black focus:ring-black my-5"
            placeholder={
              '"Síntese proteica e hipertrofia muscular", "Formas geométricas espaciais, vértices, arestas e faces", "Conceito de Cultura Sustentável"... '
            }
          />
          <div className="flex mb-5 items-center space-x-3">
            <Image src="/2-black.png" width={30} height={30} alt="1 icon" />
            <p className="text-left font-medium">Escolha a disciplina.</p>
          </div>
          <div className="block">
            <DropDown disciplina={disciplina} setdisciplina={(newdisciplina) => setdisciplina(newdisciplina)} />
          </div>

          <div className="flex mt-5 mb-5 items-center space-x-3">
            <Image src="/3-black.png" width={28} height={28} alt="1 icon" />
            <p className="text-left font-medium">Escolha a habilidade BNCC desejada.{' '}
              <span className="text-slate-500">
                <a href="https://media.tutormundi.com/wp-content/uploads/2021/01/27200057/habilidades-bncc-ensino-fundamental-1024x1024.png" target="_blank">
                  (Saiba mais)
                </a>
              </span>
            </p>
          </div>
          <div className="block">
            <DropDown2 habilidade={habilidade} sethabilidade={(newhabilidade) => sethabilidade(newhabilidade)} />
          </div>

          <div className="flex mt-5 mb-5 items-center space-x-3">
            <Image src="/4-black.png" width={28} height={28} alt="1 icon" />
            <p className="text-left font-medium">Escolha o tipo de atividade.</p>
          </div>
          <div className="block">
            <DropDown3 atividade={atividade} setatividade={(newatividade) => setatividade(newatividade)} />
          </div>

          <div className="flex mt-5 mb-5 items-center space-x-3">
            <Image src="/5-black.png" width={28} height={28} alt="1 icon" />
            <p className="text-left font-medium">Informe o número de questões{' '}
              <span className="text-slate-500">
                (caso seja uma atividade com questões múltipla escolha)
              </span>
              .
            </p>
          </div>
          <textarea
            value={input}
            onChange={handleInputChange}
            rows={1}
            className="w-full rounded-md border-gray-300 shadow-sm focus:border-black focus:ring-black"
            placeholder={
              '"3","cinco"...'
            }
          />

          <div className="flex mt-5 mb-5 items-center space-x-3">
            <Image src="/6-black.png" width={28} height={28} alt="1 icon" />
            <p className="text-left font-medium">Escolha qual o objetivo da sua atividade{' '}
              <span className="text-slate-500">
                (usaremos a Taxonomia de Bloom)
              </span>
              .
            </p>
          </div>
          <div className="block">
            <DropDown4 objetivo={objetivo} setobjetivo={(newobjetivo) => setobjetivo(newobjetivo)} />
          </div>

          <div className="flex mt-5 mb-5 items-center space-x-3">
            <Image src="/7-black.png" width={28} height={28} alt="1 icon" />
            <p className="text-left font-medium">Escolha a faixa etária dos alunos.</p>
          </div>
          <div className="block">
            <DropDown5 idade={idade} setidade={(newidade) => setidade(newidade)} />
          </div>

          <div className="flex mt-5 mb-5 items-center space-x-3">
            <Image src="/8-black.png" width={28} height={28} alt="1 icon" />
            <p className="text-left font-medium">Escolha a dificuldade da atividade.</p>
          </div>
          <div className="block">
            <DropDown6 dificuldade={dificuldade} setdificuldade={(newdificuldade) => setdificuldade(newdificuldade)} />
          </div>

          {!isLoading && (
            <button
              className="bg-black rounded-xl text-white font-medium px-4 py-2 sm:mt-10 mt-8 hover:bg-black/80 w-70"
              type="submit"
            >
              Gerar palavras mágicas &rarr;

            </button>
          )}
          {isLoading && (
            <button
              className="bg-black rounded-xl text-white font-medium px-4 py-2 sm:mt-10 mt-8 hover:bg-black/80 w-70"
              disabled
            >
              <span className="loading">
                <span style={{ backgroundColor: 'white' }} />
                <span style={{ backgroundColor: 'white' }} />
                <span style={{ backgroundColor: 'white' }} />
              </span>
            </button>
          )}
        </form>
        <Toaster
          position="top-center"
          reverseOrder={false}
          toastOptions={{ duration: 2000 }}
        />
        <hr className="h-px bg-gray-700 border-1 dark:bg-gray-700" />
        <output className="space-y-10 my-10">
          {generatedBios && (
            <>
              <div>
                <h2
                  className="sm:text-4xl text-3xl font-bold text-slate-900 mx-auto"
                  ref={bioRef}
                >
                  Your generated bios
                </h2>
              </div>
              <div className="space-y-8 flex flex-col items-center justify-center max-w-xl mx-auto">
                {generatedBios
                  .substring(generatedBios.indexOf('1') + 3)
                  .split('2.')
                  .map((generatedBio) => {
                    return (
                      <div
                        className="bg-white rounded-xl shadow-md p-4 hover:bg-gray-100 transition cursor-copy border"
                        onClick={() => {
                          navigator.clipboard.writeText(generatedBio);
                          toast('Comando copiado para a área de transferência', {
                            icon: '📋',
                          });
                        }}
                        key={generatedBio}
                      >
                        <p>{generatedBio}</p>
                      </div>
                    );
                  })}
              </div>
            </>
          )}
        </output>
      </main>
      <Footer />
    </div>
  );
}

--

route.ts

import { Configuration, OpenAIApi } from 'openai-edge';
import { OpenAIStream, StreamingTextResponse } from 'ai';

// Create an OpenAI API client (that's edge friendly!)
const config = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(config);

// Set the runtime to edge for best performance
export const runtime = 'edge';

export async function POST(req: Request) {
  const { vibe, bio } = await req.json();

  // Ask OpenAI for a streaming completion given the prompt
  const response = await openai.createChatCompletion({
    model: 'gpt-3.5-turbo',
    stream: true,
    messages: [
      {
        role: 'user',
        content: `Generate 2 ${vibe} twitter biographies with no hashtags and clearly labeled "1." and "2.". ${
          vibe === 'Funny'
            ? "Make sure there is a joke in there and it's a little ridiculous."
            : null
        }
          Make sure each generated biography is less than 160 characters, has short sentences that are found in Twitter bios, and base them on this context: ${bio}${
          bio.slice(-1) === '.' ? '' : '.'
        }`,
      },
    ],
  });

  // Convert the response into a friendly text-stream
  const stream = OpenAIStream(response);
  // Respond with the stream
  return new StreamingTextResponse(stream);
}
